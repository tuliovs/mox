'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

jest.dontMock('../index');
var memoize = require('../index').default;

describe('memoize', function () {
  it('memoizes when no arguments are passed', function () {
    var i = 0;
    function fn() {
      i += 1;
      return i;
    }
    var memoizedFn = memoize(fn);
    expect(i).toBe(0);
    expect(memoizedFn()).toBe(1);
    expect(i).toBe(1);
    expect(memoizedFn()).toBe(1);
  });

  it('memoizes when one argument is passed', function () {
    var i = 0;
    function fn(foo) {
      i += 1;
      return {
        arg: foo,
        i: i
      };
    }
    var memoizedFn = memoize(fn);
    expect(i).toBe(0);
    expect(memoizedFn()).toEqual({ arg: undefined, i: 1 });
    expect(i).toBe(1);
    expect(memoizedFn()).toEqual({ arg: undefined, i: 1 });
    expect(i).toBe(1);
    expect(memoizedFn('foo')).toEqual({ arg: 'foo', i: 2 });
    expect(i).toBe(2);
    expect(memoizedFn('foo')).toEqual({ arg: 'foo', i: 2 });
    expect(i).toBe(2);
  });

  it('memoizes when three arguments are passed', function () {
    var i = 0;
    function fn(foo, bar, baz) {
      i += 1;
      return {
        args: [foo, bar, baz],
        i: i
      };
    }
    var memoizedFn = memoize(fn);
    expect(i).toBe(0);
    expect(memoizedFn()).toEqual({ args: [undefined, undefined, undefined], i: 1 });
    expect(i).toBe(1);
    expect(memoizedFn()).toEqual({ args: [undefined, undefined, undefined], i: 1 });
    expect(i).toBe(1);
    expect(memoizedFn('foo', 'bar', 'baz')).toEqual({ args: ['foo', 'bar', 'baz'], i: 2 });
    expect(i).toBe(2);
    expect(memoizedFn('foo', 'bar', 'baz')).toEqual({ args: ['foo', 'bar', 'baz'], i: 2 });
    expect(i).toBe(2);
    expect(memoizedFn('foo', 'qux', 'baz')).toEqual({ args: ['foo', 'qux', 'baz'], i: 3 });
    expect(i).toBe(3);
  });

  it('memoizes when three object arguments are passed', function () {
    var i = 0;
    function fn(foo, bar, baz) {
      i += 1;
      return {
        args: [foo, bar, baz],
        i: i
      };
    }
    var memoizedFn = memoize(fn);
    expect(i).toBe(0);
    expect(memoizedFn()).toEqual({ args: [undefined, undefined, undefined], i: 1 });
    expect(i).toBe(1);
    expect(memoizedFn()).toEqual({ args: [undefined, undefined, undefined], i: 1 });
    expect(i).toBe(1);
    var args = [{ foo: 'oof' }, { bar: 'rab' }, { baz: 'zab' }];
    expect(memoizedFn.apply(undefined, args)).toEqual({ args: [{ foo: 'oof' }, { bar: 'rab' }, { baz: 'zab' }], i: 2 });
    expect(i).toBe(2);
    expect(memoizedFn.apply(undefined, args)).toEqual({ args: [{ foo: 'oof' }, { bar: 'rab' }, { baz: 'zab' }], i: 2 });
    expect(i).toBe(2);
  });

  it('does not memoize when non-identical arguments are passed', function () {
    var i = 0;
    function fn(foo, bar, baz) {
      i += 1;
      return {
        args: [foo, bar, baz],
        i: i
      };
    }
    var memoizedFn = memoize(fn);
    expect(i).toBe(0);
    expect(memoizedFn()).toEqual({ args: [undefined, undefined, undefined], i: 1 });
    expect(i).toBe(1);
    expect(memoizedFn()).toEqual({ args: [undefined, undefined, undefined], i: 1 });
    expect(i).toBe(1);
    expect(memoizedFn({ foo: 'oof' }, { bar: 'rab' }, { baz: 'zab' })).toEqual({ args: [{ foo: 'oof' }, { bar: 'rab' }, { baz: 'zab' }], i: 2 });
    expect(i).toBe(2);
    expect(memoizedFn({ foo: 'oof' }, { bar: 'rab' }, { baz: 'zab' })).toEqual({ args: [{ foo: 'oof' }, { bar: 'rab' }, { baz: 'zab' }], i: 3 });
    expect(i).toBe(3);
  });

  it('memoizes by the first N arguments when the arity option is passed', function () {
    var i = 0;
    function fn(foo, bar, baz) {
      i += 1;
      return {
        args: [foo, bar, baz],
        i: i
      };
    }
    var memoizedFn = memoize(fn, { arity: 2 });
    expect(memoizedFn('foo', 'bar', 'baz')).toEqual({ args: ['foo', 'bar', 'baz'], i: 1 });
    expect(memoizedFn('foo', 'bar', 'qux')).toEqual({ args: ['foo', 'bar', 'baz'], i: 1 });
  });

  it('memoizes the initial return value when and arity of 0 is passed', function () {
    var i = 0;
    function fn(foo, bar, baz) {
      i += 1;
      return {
        args: [foo, bar, baz],
        i: i
      };
    }
    var memoizedFn = memoize(fn, { arity: 0 });
    expect(memoizedFn('foo', 'bar', 'baz')).toEqual({ args: ['foo', 'bar', 'baz'], i: 1 });
    expect(memoizedFn('qux')).toEqual({ args: ['foo', 'bar', 'baz'], i: 1 });
  });

  pit('memoizes node-style async functions', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var i, fn, memoizedFn;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fn = function fn(foo, bar, callback) {
              i += 1;
              setImmediate(function () {
                callback(null, {
                  args: [foo, bar],
                  i: i
                });
              });
            };

            i = 0;
            memoizedFn = memoize(fn, { async: true });
            _context.next = 5;
            return new Promise(function (resolve) {
              memoizedFn('foo', 'bar', function (error, result) {
                expect(result).toEqual({ args: ['foo', 'bar'], i: 1 });
                resolve();
              });
            });

          case 5:
            _context.next = 7;
            return new Promise(function (resolve) {
              var sync = true;
              memoizedFn('foo', 'bar', function (error, result) {
                expect(result).toEqual({ args: ['foo', 'bar'], i: 1 });
                expect(sync).toBe(false);
                resolve();
              });
              sync = false;
            });

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  pit('calls the callback immediately when using async: \'immediate\'', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
    var i, fn, memoizedFn;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            fn = function fn(foo, bar, callback) {
              i += 1;
              setImmediate(function () {
                callback(null, {
                  args: [foo, bar],
                  i: i
                });
              });
            };

            i = 0;
            memoizedFn = memoize(fn, { async: 'immediate' });
            _context2.next = 5;
            return new Promise(function (resolve) {
              memoizedFn('foo', 'bar', function (error, result) {
                expect(result).toEqual({ args: ['foo', 'bar'], i: 1 });
                resolve();
              });
            });

          case 5:
            _context2.next = 7;
            return new Promise(function (resolve) {
              var sync = true;
              memoizedFn('foo', 'bar', function (error, result) {
                expect(result).toEqual({ args: ['foo', 'bar'], i: 1 });
                expect(sync).toBe(true);
                resolve();
              });
              sync = false;
            });

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));
});